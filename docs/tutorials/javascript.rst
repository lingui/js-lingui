**************************************************
Tutorial - Internationalization of JavaScript apps
**************************************************

In this tutorial, we'll learn how to use jsLingui's internationalization features that do not depend on React. We'll take a minimalist approach and cover the main functions from the ``@lingui/core`` package.

Setting up i18n
===============

First we need to setup the i18n object, which is pretty simple:

.. code-block:: js

  import { setupI18n } from '@lingui/core'

  // messages.js is generated by the cli
  import englishMessages from 'path-to-locale/en/messages.js';


  // setup the i18n object with active language and catalogs
  let i18n = setupI18n({
    language: 'en',
    catalogs: {
      en: englishMessages,
    },
  });


Localizing your app
===================

Once that is done, we can go ahead and use it! Wrap you text in i18n.t template literal tag so it's translated into active language:

.. code-block:: js

  i18n.t`Hello World!`
  // becomes "Salut le monde!"

  const name = "Fred"
  i18n.t`My name is ${ name }`
  // becomes "Je m'appelle Fred"



Plurals and selections are possible using plural and select methods:

.. code-block:: js

  const count = 42

  i18n.plural({
    value: count,
    one: "# book",
    other: "# books"
  })
  // becomes "42 livres"


It's also possible to nest message formats. Each message format method in i18n has a standalone companion, which only returns message without performing the translation:

.. code-block:: js

  // use i18n.select here, to translate message format
  i18n.select({
    value: gender,
    offset: 1,
    // plural, instead of i18n.plural
    female: plural({
      value: numOfGuests,
      offset: 1,
      // t, instead of i18n.t
      0: t`${host} does not give a party.`,
      1: t`${host} invites ${guest} to her party.`,
      2: t`${host} invites ${guest} and one other person to her party.`,
      other: t`${host} invites ${guest} and # other people to her party.`
    }),
    male: plural({...}), 
    other: plural({...}), 
  })


Further reading
===============

- `@lingui/react reference documentation <../ref/lingui-react.html>`_
- `@lingui/cli reference documentation <../ref/lingui-cli.html>`_
- `Pluralization Guide <../guides/plurals.html>`_
